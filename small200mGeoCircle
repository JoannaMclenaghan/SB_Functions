import com.sparkbeyond.runtime.feature.types.GeoCircle
import com.sparkbeyond.runtime.feature.types.LatLong
import com.sparkbeyond.runtime.util.datastructures.geo._
import com.sparkbeyond.runtime.feature.types._

  object ZeroComplexityMyFunctions {
    def circle200m(l: LatLong) : GeoCircle = GeoCircle(l,0.2)
    def circle300m(l: LatLong) : GeoCircle = GeoCircle(l,0.3)
    
    def attributesInPolygon(p: Polygon) = {
      val foo=OsmImplementation.getImpl().pointsIn(p)
      val h = new Histogram(foo.flatMap(_._2.grouped(2).map{case Array(k,v) => k.toString->v.toString}))
      h
    }
  }
